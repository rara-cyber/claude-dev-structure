#!/bin/bash

# organize-agent-summary.sh
# Organizes raw agent summaries from hooks into structured knowledge base
# Integrated with memory-bank-synchronizer for automatic pattern validation

set -e

# Configuration
KNOWLEDGE_DIR="$CLAUDE_PROJECT_DIR/knowledge"
ORGANIZED_DIR="$KNOWLEDGE_DIR/organized"
RAW_PATTERN="$KNOWLEDGE_DIR/*-agent-summary.md"

# Ensure organized directory exists
mkdir -p "$ORGANIZED_DIR"

# Function to extract feature name from compact summary
extract_feature() {
    local file="$1"
    # Look for feature indicators in the content
    grep -iE "(feature|implementing|working on):" "$file" | head -1 | \
    sed -E 's/.*[Ff]eature[: ]*([a-zA-Z0-9-_]+).*/\1/' | \
    tr '[:upper:]' '[:lower:]' | \
    sed 's/[^a-z0-9-]/-/g' | \
    sed 's/--*/-/g' | \
    sed 's/^-\|-$//g'
}

# Function to extract agent type from compact summary  
extract_agent_type() {
    local file="$1"
    # Look for agent type indicators
    if grep -qi "ui\|frontend\|component\|react\|vue" "$file"; then
        echo "ui-agent"
    elif grep -qi "api\|backend\|server\|endpoint" "$file"; then
        echo "api-agent"
    elif grep -qi "test\|testing\|spec\|jest" "$file"; then
        echo "testing-agent"
    elif grep -qi "database\|db\|migration\|schema" "$file"; then
        echo "database-agent"
    elif grep -qi "deploy\|build\|ci\|cd\|docker" "$file"; then
        echo "deployment-agent"
    else
        echo "general-agent"
    fi
}

# Function to get next sequence number for agent type
get_next_sequence() {
    local feature_dir="$1"
    local agent_type="$2"
    
    local existing_files
    existing_files=$(find "$feature_dir" -name "${agent_type}-summary-*.md" 2>/dev/null | wc -l)
    echo $((existing_files + 1))
}

# Process each raw summary file
for raw_file in $RAW_PATTERN; do
    # Skip if no files match pattern
    [[ ! -f "$raw_file" ]] && continue
    
    echo "Processing $(basename "$raw_file")..."
    
    # Extract metadata
    feature=$(extract_feature "$raw_file")
    agent_type=$(extract_agent_type "$raw_file")
    
    # Use timestamp as fallback feature name
    if [[ -z "$feature" || "$feature" == "-" ]]; then
        feature=$(basename "$raw_file" | cut -d'-' -f1-2)
    fi
    
    # Create feature directory
    feature_dir="$ORGANIZED_DIR/$feature"
    mkdir -p "$feature_dir"
    
    # Get sequence number
    sequence=$(get_next_sequence "$feature_dir" "$agent_type")
    sequence_padded=$(printf "%03d" "$sequence")
    
    # Generate organized filename
    organized_file="$feature_dir/${agent_type}-summary-${sequence_padded}.md"
    
    # Create header with metadata and move content
    {
        echo "# ${agent_type} Agent Summary #${sequence_padded}"
        echo
        echo "**Feature:** $feature"  
        echo "**Agent Type:** $agent_type"
        echo "**Generated:** $(date '+%Y-%m-%d %H:%M:%S')"
        echo "**Source:** $(basename "$raw_file")"
        echo
        echo "---"
        echo
        cat "$raw_file"
    } > "$organized_file"
    
    # Remove raw file after successful organization
    rm "$raw_file"
    
    echo "â†’ Organized to: $(basename "$feature_dir")/$(basename "$organized_file")"
done

# Update index file
index_file="$ORGANIZED_DIR/index.md"
{
    echo "# Knowledge Base Index"
    echo
    echo "**Last Updated:** $(date '+%Y-%m-%d %H:%M:%S')"
    echo
    echo "## Features and Agent Summaries"
    echo
    
    # List all features and their agent summaries
    find "$ORGANIZED_DIR" -maxdepth 1 -type d ! -name "organized" | sort | while read -r feature_dir; do
        [[ "$feature_dir" == "$ORGANIZED_DIR" ]] && continue
        
        feature_name=$(basename "$feature_dir")
        echo "### $feature_name"
        echo
        
        find "$feature_dir" -name "*.md" | sort | while read -r summary_file; do
            summary_name=$(basename "$summary_file" .md)
            agent_type=$(echo "$summary_name" | cut -d'-' -f1-2)
            sequence=$(echo "$summary_name" | grep -o '[0-9]*$')
            
            echo "- **$agent_type** (#$sequence): [\`$summary_name.md\`](./$feature_name/$summary_name.md)"
        done
        echo
    done
    
    echo "---"
    echo "*This index is automatically generated by organize-agent-summary.sh*"
} > "$index_file"

echo "Knowledge base organization complete. Index updated."

# Trigger memory bank synchronization after knowledge organization
echo "Triggering memory bank synchronization..."
claude task --subagent-type memory-bank-synchronizer --description "Post-organization sync" --prompt "Knowledge base has been updated with new organized summaries. Analyze the new knowledge and update CLAUDE-patterns.md, CLAUDE-decisions.md, and CLAUDE-activeContext.md to reflect any patterns, decisions, or context changes discovered in the latest agent summaries. Focus on extracting reusable patterns and architectural insights."